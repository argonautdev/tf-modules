module "cloudfront" {
  source = "terraform-aws-modules/cloudfront/aws"
  version = "3.0.1"
  comment             = var.description
  is_ipv6_enabled     = var.is_ipv6_enabled
  price_class         = var.price_class
  retain_on_delete    = var.retain_on_delete
  wait_for_deployment = var.wait_for_deployment
  
  ##Origin http/https ports are required (https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution#origin-arguments)
  origin = {
     custom_origin = {
        domain_name = var.custom_origin_dns_name
        custom_origin_config = {
          http_port   = 80
          https_port  = 443
          origin_protocol_policy = var.origin_protocol_policy
          origin_ssl_protocols   = ["TLSv1.2"]
        } 
     }
  }

  default_cache_behavior = {
    viewer_protocol_policy     = "allow-all"
    target_origin_id           = "custom_origin"
    allowed_methods = var.allowed_methods
    cached_methods  = var.cached_methods
    compress        = true

    # cache policies
    use_forwarded_values = false
    # query_string    = true
    response_headers_policy_id = var.response_headers_policy_id
    cache_policy_id = var.cache_policy_id
    origin_request_policy_id = var.origin_request_policy_id
    
  }
  
  ##If Logging is enabled it will get the value from module s3 outputs
  logging_config = var.logging ? {
     bucket = module.cf-logging-bucket.s3_bucket_bucket_domain_name
     prefix = "${var.app_name}-cloudfront" 
  } : {}
  aliases = var.subdomain != "" ? concat(var.aliases, ["${var.subdomain}.${var.domain_name}", "*.${var.subdomain}.${var.domain_name}"]) : concat(var.aliases, [var.domain_name, "*.${var.domain_name}"])
  viewer_certificate = {
    acm_certificate_arn = module.acm.acm_certificate_arn
    minimum_protocol_version = "TLSv1.2_2021"
    ssl_support_method  = "sni-only"
  }
}

##Module for creating logging bucket.
##Bucket allows to store logs files generated by cloudfront
data "aws_canonical_user_id" "current" {}
data "aws_caller_identity" "current_account" {}
data "aws_cloudfront_log_delivery_canonical_user_id" "logdelivaryaccount" {}

module "cf-logging-bucket" {
  create_bucket = var.logging ? true : false ## Bucket would be created only when logging is enabled
  source = "terraform-aws-modules/s3-bucket/aws"
  version = "3.3.0"
  bucket = var.logging ? "cf-accesslog-storage-${random_pet.this[0].id}" : null

  # Allow deletion of non-empty bucket
  force_destroy = true
  acl    = null
  ##ACL for Bucket. 
  ##1. Full Control to awslogsdelivery and to the user who is creating bucket
  grant = [{
    type        = "CanonicalUser"
    permission = "FULL_CONTROL"
    id          = data.aws_canonical_user_id.current.id
    }, {
    type        = "CanonicalUser"
    permission = "FULL_CONTROL"
    id          = data.aws_cloudfront_log_delivery_canonical_user_id.logdelivaryaccount.id
    # Ref. https://github.com/terraform-providers/terraform-provider-aws/issues/12512
    # Ref. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html
  }]
  server_side_encryption_configuration = var.logging ? {
    rule = {
      apply_server_side_encryption_by_default = {
        kms_master_key_id = aws_kms_key.objects[0].arn
        sse_algorithm     = "aws:kms"
      }
    }
  }: {}
} 

##Module for creating KMS key to encrpt the logging bucket
resource "aws_kms_key" "objects" {
  count = var.logging ? 1 : 0
  description             = "KMS key is used to encrypt bucket objects"
  deletion_window_in_days = 7
  policy = data.aws_iam_policy_document.kms_policy_document[0].json
}

#Since we are creating an KMS key to encrypt and decrypt objects in logging bucket we need to add following permissions to KMS Key
# Ref: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#AccessLogsBucketAndFileOwnership ( Required key policy for SSE-KMS buckets )
data "aws_iam_policy_document" "kms_policy_document" {
  count = var.logging ? 1 : 0
  statement {
    sid = "Allow CloudFront to use the key to deliver logs"

    actions = [
      "kms:GenerateDataKey*",
    ]
    principals {
      type        = "Service"
      identifiers = ["delivery.logs.amazonaws.com"]
    }
    resources = [
      "*"
    ]
  }
  statement {
    sid = "Enable IAM User Permissions"

    actions = [
      "kms:*",
    ]
    principals {
      type        = "AWS"
      identifiers = ["arn:aws:iam::${data.aws_caller_identity.current_account.account_id}:root"]
    }
    resources = [
      "*"
    ]
  }
}

resource "random_pet" "this" {
  count = var.logging ? 1 : 0
  length = 2
}

###Certificate Deployment in ACM for CF Alternative domain.

##Find the details of zone
data "aws_route53_zone" "hostedzone" {
  name         = var.domain_name
}

module "acm" {
  source  = "terraform-aws-modules/acm/aws"
  version = "4.0.1"
  providers = {
    aws = aws.acm ##Only Provision in "us-east-1" due it's limitation
  }
  domain_name  = var.subdomain != "" ? "${var.subdomain}.${var.domain_name}" : "${var.domain_name}"
  zone_id      = data.aws_route53_zone.hostedzone.zone_id
  subject_alternative_names = var.subdomain != "" ? "${concat(var.aliases, ["*.${var.subdomain}.${var.domain_name}"])}" : "${concat(var.aliases, ["*.${var.domain_name}"])}"
}

##Route53 Record entry for cloudfront dns
resource "aws_route53_record" "cf_record_entry_wildcard" {
  count = var.create_dns_records ? 1 : 0
  zone_id = data.aws_route53_zone.hostedzone.zone_id
  name = var.subdomain != "" ? "*.${var.subdomain}.${var.domain_name}" : "*.${var.domain_name}"
  type = "A"
  alias  {
    name = module.cloudfront.cloudfront_distribution_domain_name
    zone_id = module.cloudfront.cloudfront_distribution_hosted_zone_id
    evaluate_target_health = false
  }
}

resource "aws_route53_record" "cf_record_entry" {
  count = var.create_dns_records ? 1 : 0
  zone_id = data.aws_route53_zone.hostedzone.zone_id
  name = var.subdomain != "" ? "${var.subdomain}.${var.domain_name}" : "${var.domain_name}"
  type = "A"
  alias  {
    name = module.cloudfront.cloudfront_distribution_domain_name
    zone_id = module.cloudfront.cloudfront_distribution_hosted_zone_id
    evaluate_target_health = false
  }
}

##Route53 Record entry for cloudfront dns
resource "aws_route53_record" "cf_record_entry_aliases" {
  for_each = var.create_dns_records ? {for idx, value in var.aliases: idx => value} : {}
  name = "${each.value}"
  zone_id = data.aws_route53_zone.hostedzone.zone_id
  type = "A"
  alias  {
    name = module.cloudfront.cloudfront_distribution_domain_name
    zone_id = module.cloudfront.cloudfront_distribution_hosted_zone_id
    evaluate_target_health = false
  }
}
